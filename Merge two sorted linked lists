//https://www.hackerrank.com/challenges/merge-two-sorted-linked-lists/problem?isFullScreen=true
import java.io.*;

class SinglyLinkedListNode {
    public int data;
    public SinglyLinkedListNode next;

    public SinglyLinkedListNode(int nodeData) {
        this.data = nodeData;
        this.next = null;
    }
}

class Result {
    public static SinglyLinkedListNode mergeLists(SinglyLinkedListNode headA, SinglyLinkedListNode headB) {
        // If one of the lists is empty, return the other list
        if (headA == null) {
            return headB;
        }
        if (headB == null) {
            return headA;
        }

        // Initialize a dummy node as the head of the merged list
        SinglyLinkedListNode dummy = new SinglyLinkedListNode(0);
        SinglyLinkedListNode current = dummy;

        // Traverse both lists and merge them
        while (headA != null && headB != null) {
            if (headA.data <= headB.data) {
                current.next = headA;
                headA = headA.next;
            } else {
                current.next = headB;
                headB = headB.next;
            }
            current = current.next;
        }

        // Attach any remaining nodes from either list
        if (headA != null) {
            current.next = headA;
        } else {
            current.next = headB;
        }

        // Return the head of the merged list
        return dummy.next;
    }
}

public class Main {
    public static void printLinkedList(SinglyLinkedListNode head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int tests = Integer.parseInt(bufferedReader.readLine().trim());

        while (tests-- > 0) {
            int llist1Count = Integer.parseInt(bufferedReader.readLine().trim());
            SinglyLinkedListNode head1 = null;
            SinglyLinkedListNode tail1 = null;
            for (int i = 0; i < llist1Count; i++) {
                int data = Integer.parseInt(bufferedReader.readLine().trim());
                SinglyLinkedListNode node = new SinglyLinkedListNode(data);
                if (head1 == null) {
                    head1 = node;
                } else {
                    tail1.next = node;
                }
                tail1 = node;
            }

            int llist2Count = Integer.parseInt(bufferedReader.readLine().trim());
            SinglyLinkedListNode head2 = null;
            SinglyLinkedListNode tail2 = null;
            for (int i = 0; i < llist2Count; i++) {
                int data = Integer.parseInt(bufferedReader.readLine().trim());
                SinglyLinkedListNode node = new SinglyLinkedListNode(data);
                if (head2 == null) {
                    head2 = node;
                } else {
                    tail2.next = node;
                }
                tail2 = node;
            }

            SinglyLinkedListNode mergedList = Result.mergeLists(head1, head2);
            printLinkedList(mergedList);
        }

        bufferedReader.close();
    }
}
ye merge wale ka hia
